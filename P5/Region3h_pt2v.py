from math import log

def _P23_T(p,t):
        """Define the boundary between Region 2 and 3, P=f(T)
        """

        n = [0.34805185628969e3, -0.11671859879975e1, 0.10192970039326e-2]

        return n[0]+n[1]*t+n[2]*t**2


def _tab_P(p,t):
        """Define the boundary between Region 3g-3h, T=f(P)
        """
        I = [0, 1, 2, 3 ,4]
        n = [-0.249284240900418e5, 0.428143584791546e4, -0.269029173140130e3,
             0.751608051114157e1, -0.787105249910383e-1]

        Pr = p/1
        T = 0
        for i, ni in zip(I, n):
            t += ni * log(Pr)**i
        return t


def region3(p,t):
        """Backward equation for region 3, v=f(P,T)        
        """
        if p > 23 and t >= _tab_P(p,t) and p >=_P23_T(p,t):
            return True
        else:
            return False


def _Backward3h_v_PT(p,t):
    """
     Backward equation for region 3h, v=f(P,T)
    """
    par = [0.0032, 25, 660, 0.898, 0.983, 1, 1, 4]

    I = [-12, -12, -10, -10, -10, -10, -10, -10, -8, -8, -8, -8, -8, -6, -6,
             -6, -5, -5, -5, -4, -4, -3, -3, -2, -1, -1, 0, 1, 1, ]

    J = [8, 12, 4, 6, 8, 10, 14, 16, 0, 1, 6, 7, 8, 4, 6, 8, 2, 3, 4, 2, 4,
             1, 2, 0, 0, 2, 0, 0, 2]

    n = [0.561379678887577e-1, 0.774135421587083e10, 0.111482975877938e-8,
             -0.143987128208183e-2, 0.193696558764920e4, -0.605971823585005e9,
             0.171951568124337e14, -0.185461154985145e17, 0.387851168078010e-16,
             -0.395464327846105e-13, -0.170875935679023e3, -0.212010620701220e4,
             0.177683337348191e8, 0.110177443629575e2, -0.234396091693313e6,
             -0.656174421999594e7, 0.156362212977396e-4, -0.212946257021400e1,
             0.135249306374858e2, 0.177189164145813, 0.139499167345464e4,
             -0.703670932036388e-2,-0.152011044389648, 0.98191692299113e-4,
             0.147199658618076e-2, 0.202618487025578e2, 0.899345518944240,
             -0.211346402240858,0.249971752957491e2]

    v_, P_, T_, a, b, c, d, e = par

    Pr = p/P_
    Tr = t/T_
    suma = 0
    for i, j, ni in zip(I, J, n):
        suma += ni * (Pr-a)**(c*i) * (Tr-b)**(j*d)

    return v_*suma**e

def Backward3h_v_PT(p,t):
     r3=region3(p,t)
     if r3:
       r=_Backward3h_v_PT(p,t)
     else : 
       r=-1000
     return r  

if __name__ == '__main__':
     a =Backward3h_v_PT(23.6,652)
     b =Backward3h_v_PT(24,654)
     print(a,b)